#include <vector>
#include <deque>
using namespace std;

class Solution {
public:
    vector<int> longestSubarray(vector<int>& arr, int x) {
        int n = arr.size();
        deque<int> minD, maxD; // indices
        int i = 0, start = 0, bestLen = 0, bestStart = 0;

        for (int j = 0; j < n; j++) {
            // Maintain max deque (decreasing)
            while (!maxD.empty() && arr[maxD.back()] <= arr[j]) 
                maxD.pop_back();
            maxD.push_back(j);

            // Maintain min deque (increasing)
            while (!minD.empty() && arr[minD.back()] >= arr[j]) 
                minD.pop_back();
            minD.push_back(j);

            // Shrink window if condition broken
            while (arr[maxD.front()] - arr[minD.front()] > x) {
                if (maxD.front() == i) maxD.pop_front();
                if (minD.front() == i) minD.pop_front();
                i++;
            }

            // Update best answer
            if (j - i + 1 > bestLen) {
                bestLen = j - i + 1;
                bestStart = i;
            }
        }

        // Build result
        vector<int> ans;
        for (int k = bestStart; k < bestStart + bestLen; k++) 
            ans.push_back(arr[k]);
        return ans;
    }
};
