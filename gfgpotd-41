class Solution {
  public:
    vector<int> bottomView(Node *root) {
        if (!root) return {};
        
        // Map: horizontal distance -> node value
        map<int, int> mp;
        
        // Queue of pairs: (node pointer, horizontal distance)
        queue<pair<Node*, int>> q;
        q.push({root, 0});
        
        while (!q.empty()) {
            auto [node, dist] = q.front();
            q.pop();
            
            // Update (since we want the bottommost, the latest overwrites)
            mp[dist] = node->data;
            
            if (node->left) q.push({node->left, dist - 1});
            if (node->right) q.push({node->right, dist + 1});
        }
        
        vector<int> ans;
        for (auto &it : mp)
            ans.push_back(it.second);
        
        return ans;
    }
};
