class Solution {
public:
    int count;

    void mergesort(vector<int> &nums, int start, int end) {
        if (start >= end) return;

        int mid = start + (end - start) / 2;
        
        mergesort(nums, start, mid);
        mergesort(nums, mid + 1, end);

        // âœ… Correct counting logic
        int left = start;
        int right = mid + 1;
        while (left <= mid && right <= end) {
            if ((long long)nums[left] > 2LL * nums[right]) {
                // all elements from left..mid form valid pairs with nums[right]
                count += (mid - left + 1);
                right++;
            } else {
                left++;
            }
        }

        vector<int> temp(nums.begin() + start, nums.begin() + end + 1);
        sort(temp.begin(), temp.end());

        for (int i = start; i <= end; i++) {
            nums[i] = temp[i - start];
        }
    }

    int reversePairs(vector<int>& nums) {
        count = 0;
        int n = nums.size();
        mergesort(nums, 0, n - 1);
        return count;
    }
};
