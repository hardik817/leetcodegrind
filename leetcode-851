class Solution {
public:
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        unordered_map<int, vector<int>> graph;
        int n = quiet.size();
        vector<int> indegree(n, 0);
        vector<int> ans(n);

        // Build graph and compute in-degree
        for (auto& vec : richer) {
            int a = vec[0];
            int b = vec[1];
            graph[a].push_back(b);
            indegree[b]++;
        }

        // Initialize ans to itself (each person is the quietest they know initially)
        for (int i = 0; i < n; i++) {
            ans[i] = i;
        }

        // Topological sorting (BFS)
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                q.push(i);
            }
        }

        while (!q.empty()) {
            int top = q.front();
            q.pop();

            for (auto& neighbor : graph[top]) {
                if (quiet[ans[top]] < quiet[ans[neighbor]]) {
                    ans[neighbor] = ans[top];
                }

                indegree[neighbor]--;
                if (indegree[neighbor] == 0) {
                    q.push(neighbor);
                }
            }
        }

        return ans;
    }
};
