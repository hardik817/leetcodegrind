#include <vector>
#include <string>
using namespace std;

class Solution
{
public:
    vector<int> vowelStrings(vector<string> &words, vector<vector<int>> &queries)
    {
        vector<int> prefixSum(words.size(), 0); // Prefix sum array
        vector<int> ans;

        // Helper lambda to check if a character is a vowel
        auto isVowel = [](char c)
        {
            return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
        };

        // Build the prefix sum array
        for (int i = 0; i < words.size(); i++)
        {
            int n = words[i].size();
            if (isVowel(words[i][0]) && isVowel(words[i][n - 1]))
            {
                prefixSum[i] = (i > 0 ? prefixSum[i - 1] : 0) + 1;
            }
            else
            {
                prefixSum[i] = (i > 0 ? prefixSum[i - 1] : 0);
            }
        }

        // Process the queries
        for (const auto &q : queries)
        {
            int left = q[0];
            int right = q[1];
            int count = prefixSum[right] - (left > 0 ? prefixSum[left - 1] : 0);
            ans.push_back(count);
        }

        return ans;
    }
};
