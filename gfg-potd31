class Solution {
public:
    int kBitFlips(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> diff(n+1, 0);  // to track flip effect end
        int isFlipped = 0, count = 0;

        for (int i = 0; i < n; i++) {
            if (i >= k) {
                isFlipped ^= diff[i];  // remove effect of flip ending here
            }
            if ((arr[i] ^ isFlipped) == 0) {  // if current is 0 after flips
                if (i + k > n) return -1;    // not enough space to flip
                count++;
                isFlipped ^= 1;              // apply new flip
                diff[i + k] ^= 1;            // mark end of flip effect
            }
        }
        return count;
    }
};
