class Solution {
public:
    int maxEvents(vector<vector<int>>& events) {
        sort(events.begin(), events.end()); // Sort events by start time
        priority_queue<int, vector<int>, greater<int>> pq; // Min-heap for event end times
        
        int i = 0, n = events.size();
        int count = 0, day = 0;

        while (!pq.empty() || i < n) {
            if (pq.empty()) {
                day = events[i][0]; // Move to the next available event start day
            }

            // Add all events starting on this day
            while (i < n && events[i][0] == day) {
                pq.push(events[i][1]); // Push end time
                i++;
            }

            // Attend the event that ends the earliest
            pq.pop();
            count++;
            day++;

            // Remove past events
            while (!pq.empty() && pq.top() < day) {
                pq.pop();
            }
        }
        
        return count;
    }
};
