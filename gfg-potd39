class Solution {
public:
    vector<string> ans;

    void solve(vector<vector<int>>& maze, vector<vector<int>>& visited, int i, int j, string path) {
        int n = maze.size();

        // Base conditions
        if (i < 0 || j < 0 || i >= n || j >= n || visited[i][j] == 1 || maze[i][j] == 0)
            return;

        // Reached destination
        if (i == n - 1 && j == n - 1) {
            ans.push_back(path);
            return;
        }

        visited[i][j] = 1;

        // Down
        solve(maze, visited, i + 1, j, path + 'D');
        // Left
        solve(maze, visited, i, j - 1, path + 'L');
        // Right
        solve(maze, visited, i, j + 1, path + 'R');
        // Up
        solve(maze, visited, i - 1, j, path + 'U');

        visited[i][j] = 0; 
    }

    vector<string> ratInMaze(vector<vector<int>>& maze) {
        int n = maze.size();
        ans.clear();

        if (maze[0][0] == 0) return ans;

        vector<vector<int>> visited(n, vector<int>(n, 0));
        solve(maze, visited, 0, 0, "");

        sort(ans.begin(), ans.end());
        return ans;
    }
};
