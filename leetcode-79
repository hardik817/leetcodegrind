class Solution {
public:
    bool solve(vector<vector<char>> &board, int i, int j, int k, string &word) {
        if (board[i][j] != word[k]) {
            return false;
        }
        if (k == word.size() - 1) { // Fix base case
            return true;
        }

        char temp = board[i][j]; // Mark as visited
        board[i][j] = '#'; 

        bool found = false;
        if (i > 0) {
            found = solve(board, i - 1, j, k + 1, word);
        }
        if (!found && i < board.size() - 1) {
            found = solve(board, i + 1, j, k + 1, word);
        }
        if (!found && j > 0) {
            found = solve(board, i, j - 1, k + 1, word);
        }
        if (!found && j < board[0].size() - 1) {
            found = solve(board, i, j + 1, k + 1, word);
        }

        board[i][j] = temp; // Restore the cell
        return found;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == word[0]) {
                    if (solve(board, i, j, 0, word)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
};
