class Solution
{
public:
    int backtrack(int i, vector<int> &nums, int k, unordered_map<int, int> &map)
    {
        if (i == nums.size())
            return 1;

        int count = backtrack(i + 1, nums, k, map);

        if (map.find(nums[i] + k) == map.end() && map.find(nums[i] - k) == map.end())
        {
            map[nums[i]]++;
            count += backtrack(i + 1, nums, k, map);
            map[nums[i]]--;
            if (map[nums[i]] == 0)
                map.erase(nums[i]);
        }

        return count;
    }

    int beautifulSubsets(vector<int> &nums, int k)
    {
        unordered_map<int, int> map;
        return backtrack(0, nums, k, map) - 1;
    }
};
