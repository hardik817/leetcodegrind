class Solution {
public:
    const int MOD = 1e9 + 7;

    using Matrix = vector<vector<int>>;
    Matrix multiply(Matrix& A, Matrix& B) {
        Matrix C(26, vector<int>(26, 0));
        for (int i = 0; i < 26; i++) {
            for (int k = 0; k < 26; k++) {
                if (A[i][k] == 0) continue;
                for (int j = 0; j < 26; j++) {
                    C[i][j] = (C[i][j] + 1LL * A[i][k] * B[k][j] % MOD) % MOD;
                }
            }
        }
        return C;
    }

    Matrix matrixPower(Matrix base, int power) {
        Matrix result(26, vector<int>(26, 0));
        // Identity matrix
        for (int i = 0; i < 26; i++) result[i][i] = 1;

        while (power > 0) {
            if (power % 2 == 1) {
                result = multiply(result, base);
            }
            base = multiply(base, base);
            power /= 2;
        }
        return result;
    }

    int lengthAfterTransformations(string s, int t, vector<int>& nums) {
        Matrix M(26, vector<int>(26, 0));
        for (int i = 0; i < 26; i++) {
            for (int j = i + 1; j <= i + nums[i]; j++) {
                M[j % 26][i] = (M[j % 26][i] + 1) % MOD;
            }
        }

        vector<int> vec(26, 0);
        for (char c : s) {
            vec[c - 'a']++;
        }

        Matrix Mt = matrixPower(M, t);

        vector<int> resultVec(26, 0);
        for (int i = 0; i < 26; i++) {
            for (int j = 0; j < 26; j++) {
                resultVec[i] = (resultVec[i] + 1LL * Mt[i][j] * vec[j] % MOD) % MOD;
            }
        }

        int sum = 0;
        for (int val : resultVec) {
            sum = (sum + val) % MOD;
        }
        return sum;
    }
};
