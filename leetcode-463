class Solution
{
public:
    int n, m;

    void solve(vector<vector<int>> &grid, int i, int j, int &perimeter, vector<vector<int>> &visited)
    {
        visited[i][j] = 1;

        if (i - 1 < 0 || grid[i - 1][j] == 0)
            perimeter++;
        else if (!visited[i - 1][j])
            solve(grid, i - 1, j, perimeter, visited);

        if (j - 1 < 0 || grid[i][j - 1] == 0)
            perimeter++;
        else if (!visited[i][j - 1])
            solve(grid, i, j - 1, perimeter, visited);

        if (j + 1 >= m || grid[i][j + 1] == 0)
            perimeter++;
        else if (!visited[i][j + 1])
            solve(grid, i, j + 1, perimeter, visited);

        if (i + 1 >= n || grid[i + 1][j] == 0)
            perimeter++;
        else if (!visited[i + 1][j])
            solve(grid, i + 1, j, perimeter, visited);
    }

    int islandPerimeter(vector<vector<int>> &grid)
    {
        n = grid.size();
        m = grid[0].size();
        int perimeter = 0;
        vector<vector<int>> visited(n, vector<int>(m, 0));
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (grid[i][j] == 1)
                {
                    solve(grid, i, j, perimeter, visited);
                    return perimeter;
                }
            }
        }

        return 0;
    }
};
l