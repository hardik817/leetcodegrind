/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// public:
//     TreeNode* create(vector<int> nums,int start,int end){
//         if(start>end){
//             return nullptr;
//         }
//         auto it = max_element(nums.begin()+start, nums.begin()+end+1);
//         int index = distance(nums.begin(), it);
//         TreeNode *root=new TreeNode(*it);

//         TreeNode *left=create(nums,start,index-1);
//         TreeNode *right=create(nums,index+1,end);

//         root->left=left;
//         root->right=right;

//         return root;
//     }
//     TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
//         int n=nums.size();
//         return create(nums,0,n-1);
//     }
// };
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution
{
public:
    TreeNode *constructMaximumBinaryTree(vector<int> &nums)
    {
        vector<TreeNode *> st; // monotonic decreasing stack

        for (int num : nums)
        {
            TreeNode *cur = new TreeNode(num);

            // Pop smaller elements â€” they become left child of current node
            while (!st.empty() && st.back()->val < num)
            {
                cur->left = st.back();
                st.pop_back();
            }

            // Current node becomes right child of new stack top
            if (!st.empty())
            {
                st.back()->right = cur;
            }

            // Push current node
            st.push_back(cur);
        }

        // Bottom of stack holds root
        return st.front();
    }
};
