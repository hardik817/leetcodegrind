class Solution {
public:
    static const int MOD = 1e9 + 7;
    int n;
    vector<int> nums;
    vector<vector<vector<int>>> dp;

    int solve(int i, int par, int count) {
        if (i == n) return 1;

        int &res = dp[i][par][count];
        if (res != -1) return res;

        long long ans = 0;
        ans += solve(i+1, par, count);
        if (ans >= MOD) ans -= MOD;
        int curr_p = nums[i] % 2;
        if (par == 2) {
            ans += solve(i+1, curr_p, 1);
        } else if (curr_p == par && count < 2) {
            ans += solve(i+1, par, count+1);
        } else if (curr_p != par) {
            ans += solve(i+1, curr_p, 1);
        }
        if (ans >= MOD) ans -= MOD;

        return res = (int)ans;
    }

    int countStableSubsequences(vector<int>& arr) {
        nums = arr;
        n = nums.size();
        dp.assign(n, vector<vector<int>>(3, vector<int>(3, -1)));
        int ans = solve(0, 2, 0);
        ans = (ans - 1 + MOD) % MOD;
        return ans;
    }
};
