class Solution
{
public:
    bool diffarr(vector<int> &nums, vector<vector<int>> &queries, int k)
    {
        int n = nums.size();
        vector<int> temp(n + 1, 0); // +1 to avoid out-of-bounds
        for (int i = 0; i < k; i++)
        {
            int dec = queries[i][2];
            int l = queries[i][0];
            int r = queries[i][1];
            temp[l] += dec;
            if (r + 1 < n)
            {
                temp[r + 1] -= dec;
            }
        }
        for (int i = 1; i < n; i++)
        {
            temp[i] += temp[i - 1];
        }
        for (int i = 0; i < n; i++)
        {
            if (nums[i] - temp[i] > 0)
            {
                return false;
            }
        }
        return true;
    }

    int minZeroArray(vector<int> &nums, vector<vector<int>> &queries)
    {
        int l = 0, r = queries.size();
        int k = -1;
        while (l <= r)
        {
            int mid = l + (r - l) / 2;
            if (diffarr(nums, queries, mid))
            {
                k = mid;
                r = mid - 1;
            }
            else
            {
                l = mid + 1;
            }
        }
        return k;
    }
};
