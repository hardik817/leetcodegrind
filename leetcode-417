class Solution {
public:
    int rows, cols;
    
    void dfs(int r, int c, vector<vector<bool>> &visit, int prev, vector<vector<int>>& heights) {
        if (r < 0 || c < 0 || r >= rows || c >= cols || visit[r][c] || heights[r][c] < prev) 
            return;
        
        visit[r][c] = true;
        
        dfs(r + 1, c, visit, heights[r][c], heights);
        dfs(r - 1, c, visit, heights[r][c], heights);
        dfs(r, c + 1, visit, heights[r][c], heights);
        dfs(r, c - 1, visit, heights[r][c], heights);
    }
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        rows = heights.size();
        cols = heights[0].size();
        
        vector<vector<bool>> pac(rows, vector<bool>(cols, false));
        vector<vector<bool>> atl(rows, vector<bool>(cols, false));
        
        for (int i = 0; i < cols; i++) {
            dfs(0, i, pac, heights[0][i], heights);
            dfs(rows - 1, i, atl, heights[rows - 1][i], heights);
        }

        for (int i = 0; i < rows; i++) {
            dfs(i, 0, pac, heights[i][0], heights);
            dfs(i, cols - 1, atl, heights[i][cols - 1], heights);
        }
        
        vector<vector<int>> ans;
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (pac[i][j] && atl[i][j]) {
                    ans.push_back({i, j});
                }
            }
        }
        
        return ans;
    }
};
