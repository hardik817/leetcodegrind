class Solution {
public:
    int memo[101][101];

    bool solve(string &s1, string &s2, string &s3, int i, int j) {
        if (i == s1.size() && j == s2.size()) return true; // Base case: both strings are used up

        if (memo[i][j] != -1) return memo[i][j];  // Return precomputed result

        bool left = false, right = false;
        int k = i + j;  // Since k = i + j

        if (i < s1.size() && s1[i] == s3[k]) {
            left = solve(s1, s2, s3, i + 1, j);
        }
        if (j < s2.size() && s2[j] == s3[k]) {
            right = solve(s1, s2, s3, i, j + 1);
        }

        return memo[i][j] = left || right;
    }

    bool isInterleave(string s1, string s2, string s3) {
        if (s1.size() + s2.size() != s3.size()) return false;

        memset(memo, -1, sizeof(memo));

        return solve(s1, s2, s3, 0, 0);
    }
};
