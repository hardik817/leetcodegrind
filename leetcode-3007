class Solution {
public:
    typedef long long ll;
    vector<ll> bitsets;

    void solve(ll n) {
        if (n == 0) return;
        
        ll power = log2(n);
        ll powerval = 1LL << power;

        bitsets[power] += n - powerval + 1;

        for (int i = 0; i < power; i++) {
            bitsets[i] += powerval / 2;
        }

        solve(n - powerval);
    }

    long long findMaximumNumber(long long k, int x) {
        ll left = 0, right = 1e15, ans = 0;
        while (left <= right) {
            ll mid = left + (right - left) / 2;

            bitsets.assign(65, 0); 
            solve(mid);

            ll sum = 0;
            for (int i = 0; i < 65; i++) {
                if ((i + 1) % x == 0) {
                    sum += bitsets[i];
                }
            }

            if (sum <= k) {
                ans = mid;       
                left = mid + 1;
            } else {
                right = mid - 1; 
            }
        }

        return ans;
    }
};
