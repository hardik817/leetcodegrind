class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        if (matrix.empty()) return 0;
        
        int rows = matrix.size();
        int cols = matrix[0].size();
        int area = 0;

        vector<vector<int>> heights(rows, vector<int>(cols, 0));

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] == '1') {
                    heights[i][j] = (i > 0 ? heights[i - 1][j] + 1 : 1);
                } else {
                    heights[i][j] = 0;
                }
            }
            vector<int> minLeft(cols), minRight(cols);
            stack<int> st;
            for (int j = 0; j < cols; j++) {
                while (!st.empty() && heights[i][st.top()] >= heights[i][j]) {
                    st.pop();
                }
                minLeft[j] = st.empty() ? -1 : st.top();
                st.push(j);
            }

            while (!st.empty()) st.pop();
            for (int j = cols - 1; j >= 0; j--) {
                while (!st.empty() && heights[i][st.top()] >= heights[i][j]) {
                    st.pop();
                }
                minRight[j] = st.empty() ? cols : st.top();
                st.push(j);
            }
            for (int j = 0; j < cols; j++) {
                area = max(area, heights[i][j] * (minRight[j] - minLeft[j] - 1));
            }
        }

        return area;
    }
};
