class Solution
{
    void dfs(int row, int col, vector<vector<int>> &vis, vector<vector<char>> &board)
    {
        // Mark the current cell as visited
        vis[row][col] = 1;

        int n = board.size();    // Number of rows
        int m = board[0].size(); // Number of columns

        // Direction arrays to represent four possible moves: down, up, right, left
        int delRow[4] = {1, -1, 0, 0};
        int delCol[4] = {0, 0, 1, -1};

        // Traverse all four possible directions
        for (int i = 0; i < 4; i++)
        {
            int nrow = row + delRow[i]; // New row index
            int ncol = col + delCol[i]; // New column index

            // Check boundary conditions, visitation status, and if the cell contains 'O'
            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
                vis[nrow][ncol] == 0 && board[nrow][ncol] == 'O')
            {
                dfs(nrow, ncol, vis, board); // Recursively visit the neighbor
            }
        }
    }

public:
    void solve(vector<vector<char>> &board)
    {
        int n = board.size();    // Number of rows
        int m = board[0].size(); // Number of columns

        // Visited matrix to track which cells have been processed
        vector<vector<int>> vis(n, vector<int>(m, 0));

        // Traverse the boundary rows and mark all connected 'O's as visited
        for (int i = 0; i < n; i++)
        {
            // Check the first column (left boundary)
            if (vis[i][0] == 0 && board[i][0] == 'O')
            {
                dfs(i, 0, vis, board);
            }
            // Check the last column (right boundary)
            if (vis[i][m - 1] == 0 && board[i][m - 1] == 'O')
            {
                dfs(i, m - 1, vis, board);
            }
        }

        // Traverse the boundary columns and mark all connected 'O's as visited
        for (int j = 0; j < m; j++)
        {
            // Check the first row (top boundary)
            if (vis[0][j] == 0 && board[0][j] == 'O')
            {
                dfs(0, j, vis, board);
            }
            // Check the last row (bottom boundary)
            if (vis[n - 1][j] == 0 && board[n - 1][j] == 'O')
            {
                dfs(n - 1, j, vis, board);
            }
        }

        // Traverse the entire grid to flip unvisited 'O's to 'X's
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                // If a cell is not visited and contains 'O', flip it to 'X'
                if (vis[i][j] == 0 && board[i][j] == 'O')
                {
                    board[i][j] = 'X';
                }
            }
        }
    }
};