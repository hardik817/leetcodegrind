class Solution {
public:
    const long long mod = 1e9+7;

    long long modPow(long long a, long long b, long long m) {
        long long res = 1;
        while(b > 0) {
            if(b & 1) res = (res * a) % m;
            a = (a * a) % m;
            b >>= 1;
        }
        return res;
    }

    void createpower(vector<int> &power, int n) {
        for(int i = 0; i < 31; i++) {
            if(n & (1 << i)) {
                power.push_back(1 << i);
            }
        }
    }

    vector<int> productQueries(int n, vector<vector<int>>& queries) {
        vector<int> power;
        createpower(power, n);
        sort(power.begin(), power.end());

        int sz = power.size();
        vector<long long> prefix(sz);
        prefix[0] = power[0] % mod;
        for(int i = 1; i < sz; i++) {
            prefix[i] = (prefix[i-1] * power[i]) % mod;
        }

        vector<int> ans;
        for(auto &q : queries) {
            int l = q[0], r = q[1];
            if(l > 0) {
                long long denom = prefix[l-1];
                long long inv = modPow(denom, mod-2, mod);
                ans.push_back((prefix[r] * inv) % mod);
            } else {
                ans.push_back(prefix[r]);
            }
        }
        return ans;
    }
};
