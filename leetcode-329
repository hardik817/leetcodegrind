class Solution {
public:
    int solve(vector<vector<int>>& matrix, int i, int j, vector<vector<int>>& dp, int m, int n) {
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        
        int currmax = 1; // At least the current cell is part of the path
        
        // Move Up
        if (i - 1 >= 0 && matrix[i][j] < matrix[i - 1][j]) {
            currmax = max(currmax, 1 + solve(matrix, i - 1, j, dp, m, n));
        }
        // Move Down
        if (i + 1 < m && matrix[i][j] < matrix[i + 1][j]) {
            currmax = max(currmax, 1 + solve(matrix, i + 1, j, dp, m, n));
        }
        // Move Left
        if (j - 1 >= 0 && matrix[i][j] < matrix[i][j - 1]) {
            currmax = max(currmax, 1 + solve(matrix, i, j - 1, dp, m, n));
        }
        // Move Right
        if (j + 1 < n && matrix[i][j] < matrix[i][j + 1]) {
            currmax = max(currmax, 1 + solve(matrix, i, j + 1, dp, m, n));
        }
        
        return dp[i][j] = currmax;
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        int maxlen = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                maxlen = max(maxlen, solve(matrix, i, j, dp, m, n));
            }
        }
        
        return maxlen;
    }
};
