class Solution {
public:
    int calculate(string s) {
        stack<int> nums;
        stack<char> ops;
        int i = 0;
        int n = s.size();

        while (i < n) {
            if (isspace(s[i])) {
                i++;  // Skip spaces
            } else if (isdigit(s[i])) {
                int num = 0;
                while (i < n && isdigit(s[i])) {
                    num = num * 10 + (s[i] - '0');
                    i++;
                }
                nums.push(num);
            } else if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/') {
                while (!ops.empty() && precedence(ops.top()) >= precedence(s[i])) {
                    evaluateTop(nums, ops);
                }
                ops.push(s[i]);
                i++;
            } else {
                i++; 
            }
        }

        while (!ops.empty()) {
            evaluateTop(nums, ops);
        }

        return nums.top();
    }

private:
    int precedence(char op) {
        if (op == '*' || op == '/') return 2;
        if (op == '+' || op == '-') return 1;
        return 0;
    }

    void evaluateTop(stack<int>& nums, stack<char>& ops) {
        int b = nums.top(); nums.pop();
        int a = nums.top(); nums.pop();
        char op = ops.top(); ops.pop();
        if (op == '+') nums.push(a + b);
        else if (op == '-') nums.push(a - b);
        else if (op == '*') nums.push(a * b);
        else if (op == '/') nums.push(a / b);
    }
};