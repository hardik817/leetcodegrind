class Solution {
public:
    int n, m;

    void dfs(vector<vector<char>>& board, vector<vector<int>>& visited, int i, int j, int dir) {
        if (i < 0 || j < 0 || i >= n || j >= m || board[i][j] != 'X' || visited[i][j])
            return;

        visited[i][j] = 1;

        // Explore in only one direction
        if (dir == 0) { // Horizontal battleship
            dfs(board, visited, i, j + 1, 0);
        } 
        else { // Vertical battleship
            dfs(board, visited, i + 1, j, 1);
        }
    }

    int countBattleships(vector<vector<char>>& board) {
        n = board.size();
        m = board[0].size();
        vector<vector<int>> visited(n, vector<int>(m, 0));
        int count = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 'X' && visited[i][j] == 0) {
                    count++;
                    
                    if (j + 1 < m && board[i][j + 1] == 'X') {
                        dfs(board, visited, i, j, 0); // Horizontal DFS
                    } else {
                        dfs(board, visited, i, j, 1); // Vertical DFS
                    }
                }
            }
        }
        return count;
    }
};
