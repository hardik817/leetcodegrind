class Solution {
public:
    int solve(int i, int j, int m, int n, int neutralize, vector<vector<int>>& coins, 
             vector<vector<vector<int>>>& dp) {
        if (i >= m || j >= n) {
            return INT_MIN;
        }
        if (i == m-1 && j == n-1) {
            return coins[i][j] < 0 && neutralize > 0 ? 0 : coins[i][j];
        }
        if (dp[i][j][neutralize] != -1) {
            return dp[i][j][neutralize];
        }
        
        int curr_value = coins[i][j];
        int max_sum = INT_MIN;
        
        int right = solve(i, j+1, m, n, neutralize, coins, dp);
        int down = solve(i+1, j, m, n,neutralize,coins, dp);
        max_sum = curr_value + max(right, down);
        
        if (neutralize > 0 && curr_value < 0) {
            int right_neutralized = solve(i, j+1, m, n, neutralize-1, coins, dp);
            int down_neutralized = solve(i+1, j, m, n, neutralize-1, coins, dp);
            max_sum = max(max_sum, max(right_neutralized, down_neutralized));
        }
        
        dp[i][j][neutralize] = max_sum;
        return max_sum;
    }
    
    int maximumAmount(vector<vector<int>>& coins) {
        int m = coins.size();
        if (m == 0) return 0;
        int n = coins[0].size();=
        vector<vector<vector<int>>> dp(m, vector<vector<int>>(n, vector<int>(3, -1)));
        return solve(0, 0, m, n, 2, coins, dp);
    }
};