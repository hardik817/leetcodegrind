class Solution {
public:
    void dfs(vector<int>& edges, int node, vector<int>& dist) {
        int distance = 0;
        while (node != -1 && dist[node] == INT_MAX) {
            dist[node] = distance++;
            node = edges[node];
        }
    }

    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size();
        vector<int> dist1(n, INT_MAX), dist2(n, INT_MAX);

        dfs(edges, node1, dist1);
        dfs(edges, node2, dist2);

        int minDist = INT_MAX;
        int result = -1;

        for (int i = 0; i < n; ++i) {
            if (dist1[i] != INT_MAX && dist2[i] != INT_MAX) {
                int maxDist = max(dist1[i], dist2[i]);
                if (maxDist < minDist) {
                    minDist = maxDist;
                    result = i;
                }
            }
        }

        return result;
    }
};
