class Solution
{
public:
    int mod = 1e9 + 7;
    int solve(int sum, int target, int i, int x, int n, vector<vector<int>> &dp)
    {
        if (sum == n)
        {
            return 1;
        }
        else if (sum > n)
        {
            return 0;
        }
        if (i > target)
        {
            return 0;
        }
        if (dp[i][sum] != -1)
        {
            return dp[i][sum];
        }
        int notTake = solve(sum, target, i + 1, x, n, dp);

        int take = solve(sum + pow(i, x), target, i + 1, x, n, dp);

        return dp[i][sum] = (take + notTake) % mod;
    }
    int numberOfWays(int n, int x)
    {
        int target = pow(n * 1.0, 1 / (x * 1.0)) + 1;
        vector<vector<int>> dp(target + 1, vector<int>(n + 1, -1));
        int ans = solve(0, target, 1, x, n, dp) % mod;
        return ans % mod;
    }
};
l